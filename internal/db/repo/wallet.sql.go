// Code generated by sqlc. DO NOT EDIT.
// source: wallet.sql

package db

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_id, balance)
VALUES ($1, $2) 
RETURNING id, user_id, balance, created_at
`

type CreateWalletParams struct {
	UserID  int64 `json:"user_id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, arg.UserID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, balance, created_at FROM wallets
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, userID int64) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets
SET balance = $2
WHERE user_id = $1
RETURNING id, user_id, balance, created_at
`

type UpdateWalletParams struct {
	UserID  int64 `json:"user_id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateWallet, arg.UserID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
